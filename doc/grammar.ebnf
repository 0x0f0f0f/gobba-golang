(* This file contains the Extended Backus-Naur form grammar for the gobba 
   programming language. Operator precedence is complicated to express through
   an EBNF grammar, but is easier to implement by using a Pratt Parser.
   See Pratt, Vaughan. "Top down operator precedence." Proceedings of the 1st
   Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages
   (1973). Also, a Pratt parser produces much more compact AST representations
   than other recursive descent parsers.
 *)

program = w, package_statement, {statement}
statement = w, (let_statement | expr_statement), w, ";" ; 

package_statement = "package", w, identifier, w, ";";
let_statement = "let", w, assignments, w, "=", w, expr; 
expr_statement = expr ;

(* TODO directives *)
(* TODO type annotation )

primitive_type = identifier | "int" | "float" | "complex" | "rune" | "string" 
    | density, w, "matrix" | density, w, "cmatrix" (* float64 and complex128 matrices*)
    | "[", w, integer, w, "]", type (* Arrays *)
    | "[]", type (* List *)

density = "sparse" | "dense"

(* Expressions *):
expr = lowest | prefixed | infix_expr | let_expr | ifthenelse | application;
ifthenelse = "if", w, expr, w, "then", w, expr, w, "else", w, expr ;
application = expr, w, literal |  ; function application, left associative
let_expr = "let", w, assignments, w, "in", w, expr;
assignments = assignment, {w, "and", w, assignment} ;  
assignment = identifier, w, "=", w, expr ; 

(* Operators. NOTE that operator precedence is not defined in the 
grammar, but through the Pratt parser. An example of this approach 
can be seen in the Go programming language specification document 
https://golang.org/ref/spec  *)

infix_expr = expr, w, infix_op, w, expr
infix_op = compose_op | ">>" | "||" | "&&" | eq_op 
    | comparison_op | "::" | sum_op | product_op | "%" | "^"
    | access_op ;

compose_op = ">=>" | "<=<" 
eq_op = "=" | "!=" 
comparison_op = "<" | "<=" | ">" | ">=" ;
sum_op = "+" | "-" | "+." | "-." | "+:" | "-:" "; 
product_op = "*" | "/" | "*." | "/." | "*:" | "/:"  ; 
topow_op = "^" | "^." | "^:" ;
acces_op = "@" | ":" ;

prefixed = lowest | prefix_op prefixed
prefix_op = "!" | "-"
lowest = literal | "(", w, expr, w, ")" | "$", w, expr;

(* Literals *)
(* TODO vectors *)
literal = composite_literal | basic_literal ; 
composite_literal = complex_literal | lambda_literal | record_literal ; 
basic_literal = float | integer | imag | string | identifier ; 
record_literal = "{", w, [ assignment, w, {",", w, assignments, w} ], w, "}" ;

(* The addition/subtraction operators are overloaded to correctly
parse complex number literals without using additional operators, 
in the form a+bi or a-bi*)
complex_literal = (float | integer), sum_op, (float | integer), "i";

(* Function literals *)
lambda_literal = ("fun" | "lambda"), w, "(", w, param_list, w, ")", w, "{", w, expr, w, "}" ;
param_list = identifier_or_annot, { w, identifier_or_annot }
identifier_or_annot = identifier [w, ":", w, type ] ; 

(* Basic literals *)
type = "int" | "bool" | "float" | "rune" | "string" | "complex" | identifier
string = '"', ? all possible characters ?, '"';
rune = "'", ? an Unicode value ?, "'"
imag = (float | integer), "i";
float = integer, ".", integer, [ "e", ["+" | "-"], integer ];
integer = digit, {digit} ;
identifier = (alpha | "_"), { alpha | digit | "_" } ;
alpha = ? an Unicode letter ? ;
digit = ? an Unicode digit ? ;

(* Whitespace *)
w = wc, {wc} ; whitespace ;
wc = ? an Unicode whitespace character ? ; 
